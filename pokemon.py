#!/usr/bin/env python3



from csv import DictReader
import re
import sys
from pathlib import Path

def __(cap_name):
  return cap_name.lower().capitalize()

type_names = {
  "TYPE_NORMAL": __("NORMAL"),
  "TYPE_FIGHTING": __("FIGHTING"),
  "TYPE_FLYING": __("FLYING"),
  "TYPE_POISON": __("POISON"),
  "TYPE_GROUND": __("GROUND"),
  "TYPE_ROCK": __("ROCK"),
  "TYPE_BUG": __("BUG"),
  "TYPE_GHOST": __("GHOST"),
  "TYPE_STEEL": __("STEEL"),
  "TYPE_MYSTERY": __("???"),
  "TYPE_FIRE": __("FIRE"),
  "TYPE_WATER": __("WATER"),
  "TYPE_GRASS": __("GRASS"),
  "TYPE_ELECTRIC": __("ELECTRIC"),
  "TYPE_PSYCHIC": __("PSYCHIC"),
  "TYPE_ICE": __("ICE"),
  "TYPE_DRAGON": __("DRAGON"),
  "TYPE_DARK": __("DARK"),
}
globals().update(type_names)

TYPE_MUL_SUPER_EFFECTIVE = 2.0
TYPE_MUL_NORMAL = 1.0
TYPE_MUL_NOT_EFFECTIVE = 0.5
TYPE_MUL_NO_EFFECT = 0.0

effectiveness = {
  TYPE_NORMAL: {
    TYPE_ROCK: TYPE_MUL_NOT_EFFECTIVE, # TYPE_NORMAL -> TYPE_ROCK
    TYPE_STEEL: TYPE_MUL_NOT_EFFECTIVE, # TYPE_NORMAL -> TYPE_STEEL
  }, # TYPE_FIRE:
  TYPE_FIRE: {
    TYPE_FIRE: TYPE_MUL_NOT_EFFECTIVE, # TYPE_FIRE -> TYPE_FIRE
    TYPE_WATER: TYPE_MUL_NOT_EFFECTIVE, # TYPE_FIRE -> TYPE_WATER
    TYPE_GRASS: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_FIRE -> TYPE_GRASS
    TYPE_ICE: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_FIRE -> TYPE_ICE
    TYPE_BUG: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_FIRE -> TYPE_BUG
    TYPE_ROCK: TYPE_MUL_NOT_EFFECTIVE, # TYPE_FIRE -> TYPE_ROCK
    TYPE_DRAGON: TYPE_MUL_NOT_EFFECTIVE, # TYPE_FIRE -> TYPE_DRAGON
    TYPE_STEEL: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_FIRE -> TYPE_STEEL
  }, # TYPE_WATER:
  TYPE_WATER: {
    TYPE_FIRE: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_WATER -> TYPE_FIRE
    TYPE_WATER: TYPE_MUL_NOT_EFFECTIVE, # TYPE_WATER -> TYPE_WATER
    TYPE_GRASS: TYPE_MUL_NOT_EFFECTIVE, # TYPE_WATER -> TYPE_GRASS
    TYPE_GROUND: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_WATER -> TYPE_GROUND
    TYPE_ROCK: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_WATER -> TYPE_ROCK
    TYPE_DRAGON: TYPE_MUL_NOT_EFFECTIVE, # TYPE_WATER -> TYPE_DRAGON
  }, # TYPE_ELECTRIC:
  TYPE_ELECTRIC: {
    TYPE_WATER: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_ELECTRIC -> TYPE_WATER
    TYPE_ELECTRIC: TYPE_MUL_NOT_EFFECTIVE, # TYPE_ELECTRIC -> TYPE_ELECTRIC
    TYPE_GRASS: TYPE_MUL_NOT_EFFECTIVE, # TYPE_ELECTRIC -> TYPE_GRASS
    TYPE_GROUND: TYPE_MUL_NO_EFFECT, # TYPE_ELECTRIC -> TYPE_GROUND
    TYPE_FLYING: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_ELECTRIC -> TYPE_FLYING
    TYPE_DRAGON: TYPE_MUL_NOT_EFFECTIVE, # TYPE_ELECTRIC -> TYPE_DRAGON
  }, # TYPE_GRASS:
  TYPE_GRASS: {
    TYPE_FIRE: TYPE_MUL_NOT_EFFECTIVE, # TYPE_GRASS -> TYPE_FIRE
    TYPE_WATER: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_GRASS -> TYPE_WATER
    TYPE_GRASS: TYPE_MUL_NOT_EFFECTIVE, # TYPE_GRASS -> TYPE_GRASS
    TYPE_POISON: TYPE_MUL_NOT_EFFECTIVE, # TYPE_GRASS -> TYPE_POISON
    TYPE_GROUND: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_GRASS -> TYPE_GROUND
    TYPE_FLYING: TYPE_MUL_NOT_EFFECTIVE, # TYPE_GRASS -> TYPE_FLYING
    TYPE_BUG: TYPE_MUL_NOT_EFFECTIVE, # TYPE_GRASS -> TYPE_BUG
    TYPE_ROCK: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_GRASS -> TYPE_ROCK
    TYPE_DRAGON: TYPE_MUL_NOT_EFFECTIVE, # TYPE_GRASS -> TYPE_DRAGON
    TYPE_STEEL: TYPE_MUL_NOT_EFFECTIVE, # TYPE_GRASS -> TYPE_STEEL
  }, # TYPE_ICE:
  TYPE_ICE: {
    TYPE_WATER: TYPE_MUL_NOT_EFFECTIVE, # TYPE_ICE -> TYPE_WATER
    TYPE_GRASS: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_ICE -> TYPE_GRASS
    TYPE_ICE: TYPE_MUL_NOT_EFFECTIVE, # TYPE_ICE -> TYPE_ICE
    TYPE_GROUND: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_ICE -> TYPE_GROUND
    TYPE_FLYING: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_ICE -> TYPE_FLYING
    TYPE_DRAGON: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_ICE -> TYPE_DRAGON
    TYPE_STEEL: TYPE_MUL_NOT_EFFECTIVE, # TYPE_ICE -> TYPE_STEEL
    TYPE_FIRE: TYPE_MUL_NOT_EFFECTIVE, # TYPE_ICE -> TYPE_FIRE
  }, # TYPE_FIGHTING:
  TYPE_FIGHTING: {
    TYPE_NORMAL: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_FIGHTING -> TYPE_NORMAL
    TYPE_ICE: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_FIGHTING -> TYPE_ICE
    TYPE_POISON: TYPE_MUL_NOT_EFFECTIVE, # TYPE_FIGHTING -> TYPE_POISON
    TYPE_FLYING: TYPE_MUL_NOT_EFFECTIVE, # TYPE_FIGHTING -> TYPE_FLYING
    TYPE_PSYCHIC: TYPE_MUL_NOT_EFFECTIVE, # TYPE_FIGHTING -> TYPE_PSYCHIC
    TYPE_BUG: TYPE_MUL_NOT_EFFECTIVE, # TYPE_FIGHTING -> TYPE_BUG
    TYPE_ROCK: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_FIGHTING -> TYPE_ROCK
    TYPE_DARK: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_FIGHTING -> TYPE_DARK
    TYPE_STEEL: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_FIGHTING -> TYPE_STEEL
  }, # TYPE_POISON:
  TYPE_POISON: {
    TYPE_GRASS: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_POISON -> TYPE_GRASS
    TYPE_POISON: TYPE_MUL_NOT_EFFECTIVE, # TYPE_POISON -> TYPE_POISON
    TYPE_GROUND: TYPE_MUL_NOT_EFFECTIVE, # TYPE_POISON -> TYPE_GROUND
    TYPE_ROCK: TYPE_MUL_NOT_EFFECTIVE, # TYPE_POISON -> TYPE_ROCK
    TYPE_GHOST: TYPE_MUL_NOT_EFFECTIVE, # TYPE_POISON -> TYPE_GHOST
    TYPE_STEEL: TYPE_MUL_NO_EFFECT, # TYPE_POISON -> TYPE_STEEL
  }, # TYPE_GROUND:
  TYPE_GROUND: {
    TYPE_FIRE: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_GROUND -> TYPE_FIRE
    TYPE_ELECTRIC: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_GROUND -> TYPE_ELECTRIC
    TYPE_GRASS: TYPE_MUL_NOT_EFFECTIVE, # TYPE_GROUND -> TYPE_GRASS
    TYPE_POISON: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_GROUND -> TYPE_POISON
    TYPE_FLYING: TYPE_MUL_NO_EFFECT, # TYPE_GROUND -> TYPE_FLYING
    TYPE_BUG: TYPE_MUL_NOT_EFFECTIVE, # TYPE_GROUND -> TYPE_BUG
    TYPE_ROCK: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_GROUND -> TYPE_ROCK
    TYPE_STEEL: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_GROUND -> TYPE_STEEL
  }, # TYPE_FLYING:
  TYPE_FLYING: {
    TYPE_ELECTRIC: TYPE_MUL_NOT_EFFECTIVE, # TYPE_FLYING -> TYPE_ELECTRIC
    TYPE_GRASS: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_FLYING -> TYPE_GRASS
    TYPE_FIGHTING: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_FLYING -> TYPE_FIGHTING
    TYPE_BUG: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_FLYING -> TYPE_BUG
    TYPE_ROCK: TYPE_MUL_NOT_EFFECTIVE, # TYPE_FLYING -> TYPE_ROCK
    TYPE_STEEL: TYPE_MUL_NOT_EFFECTIVE, # TYPE_FLYING -> TYPE_STEEL
  }, # TYPE_PSYCHIC:
  TYPE_PSYCHIC: {
    TYPE_FIGHTING: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_PSYCHIC -> TYPE_FIGHTING
    TYPE_POISON: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_PSYCHIC -> TYPE_POISON
    TYPE_PSYCHIC: TYPE_MUL_NOT_EFFECTIVE, # TYPE_PSYCHIC -> TYPE_PSYCHIC
    TYPE_DARK: TYPE_MUL_NO_EFFECT, # TYPE_PSYCHIC -> TYPE_DARK
    TYPE_STEEL: TYPE_MUL_NOT_EFFECTIVE, # TYPE_PSYCHIC -> TYPE_STEEL
  }, # TYPE_BUG:
  TYPE_BUG: {
    TYPE_FIRE: TYPE_MUL_NOT_EFFECTIVE, # TYPE_BUG -> TYPE_FIRE
    TYPE_GRASS: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_BUG -> TYPE_GRASS
    TYPE_FIGHTING: TYPE_MUL_NOT_EFFECTIVE, # TYPE_BUG -> TYPE_FIGHTING
    TYPE_POISON: TYPE_MUL_NOT_EFFECTIVE, # TYPE_BUG -> TYPE_POISON
    TYPE_FLYING: TYPE_MUL_NOT_EFFECTIVE, # TYPE_BUG -> TYPE_FLYING
    TYPE_PSYCHIC: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_BUG -> TYPE_PSYCHIC
    TYPE_GHOST: TYPE_MUL_NOT_EFFECTIVE, # TYPE_BUG -> TYPE_GHOST
    TYPE_DARK: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_BUG -> TYPE_DARK
    TYPE_STEEL: TYPE_MUL_NOT_EFFECTIVE, # TYPE_BUG -> TYPE_STEEL
  }, # TYPE_ROCK:
  TYPE_ROCK: {
    TYPE_FIRE: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_ROCK -> TYPE_FIRE
    TYPE_ICE: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_ROCK -> TYPE_ICE
    TYPE_FIGHTING: TYPE_MUL_NOT_EFFECTIVE, # TYPE_ROCK -> TYPE_FIGHTING
    TYPE_GROUND: TYPE_MUL_NOT_EFFECTIVE, # TYPE_ROCK -> TYPE_GROUND
    TYPE_FLYING: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_ROCK -> TYPE_FLYING
    TYPE_BUG: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_ROCK -> TYPE_BUG
    TYPE_STEEL: TYPE_MUL_NOT_EFFECTIVE, # TYPE_ROCK -> TYPE_STEEL
  }, # TYPE_GHOST:
  TYPE_GHOST: {
    TYPE_NORMAL: TYPE_MUL_NO_EFFECT, # TYPE_GHOST -> TYPE_NORMAL
    TYPE_PSYCHIC: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_GHOST -> TYPE_PSYCHIC
    TYPE_DARK: TYPE_MUL_NOT_EFFECTIVE, # TYPE_GHOST -> TYPE_DARK
    TYPE_STEEL: TYPE_MUL_NOT_EFFECTIVE, # TYPE_GHOST -> TYPE_STEEL
    TYPE_GHOST: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_GHOST -> TYPE_GHOST
  }, # TYPE_DRAGON:
  TYPE_DRAGON: {
    TYPE_DRAGON: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_DRAGON -> TYPE_DRAGON
    TYPE_STEEL: TYPE_MUL_NOT_EFFECTIVE, # TYPE_DRAGON -> TYPE_STEEL
  }, # TYPE_DARK:
  TYPE_DARK: {
    TYPE_FIGHTING: TYPE_MUL_NOT_EFFECTIVE, # TYPE_DARK -> TYPE_FIGHTING
    TYPE_PSYCHIC: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_DARK -> TYPE_PSYCHIC
    TYPE_GHOST: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_DARK -> TYPE_GHOST
    TYPE_DARK: TYPE_MUL_NOT_EFFECTIVE, # TYPE_DARK -> TYPE_DARK
    TYPE_STEEL: TYPE_MUL_NOT_EFFECTIVE, # TYPE_DARK -> TYPE_STEEL
  }, # TYPE_STEEL:
  TYPE_STEEL: {
    TYPE_FIRE: TYPE_MUL_NOT_EFFECTIVE, # TYPE_STEEL -> TYPE_FIRE
    TYPE_WATER: TYPE_MUL_NOT_EFFECTIVE, # TYPE_STEEL -> TYPE_WATER
    TYPE_ELECTRIC: TYPE_MUL_NOT_EFFECTIVE, # TYPE_STEEL -> TYPE_ELECTRIC
    TYPE_ICE: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_STEEL -> TYPE_ICE
    TYPE_ROCK: TYPE_MUL_SUPER_EFFECTIVE, # TYPE_STEEL -> TYPE_ROCK
    TYPE_STEEL: TYPE_MUL_NOT_EFFECTIVE, # TYPE_STEEL -> TYPE_STEEL
  },
}



pat = re.compile(r"^(.*?[a-z0-9])([A-Z].*)$")

if sys.argv[0]:
  script = Path(sys.argv[0])
elif "__file__" in globals():
  script = Path(__file__)

script = script.absolute()
csv_path = script.parent / "pokemon.csv"

with open(csv_path) as csv_file:
  csv = DictReader(csv_file)
  raw_data = list(csv)
  data = [
    {
      **r,
      "Types": (r["Type 1"], r["Type 2"]),
      "Gen": int(r["Generation"]),
      "Name": (
        (m := pat.match(name := r["Name"]))
        and (m[1] + " - " + m[2])
        or name
      )
    }
    for r in raw_data
  ]

if len(sys.argv) > 1:
  name = sys.argv[1]
else:
  name = input("Name of pokemon: ")
  
rows = [
  r for r in data if r["Name"].split()[0].lower() == name.strip().lower()
]

if not rows:
  print("No matching pokemon")
  sys.exit(1)
  
def color_type(ty):
  colors = {
    "Grass": "\x1b[1;32m",
    "Water": "\x1b[1;44;37m",
    "Ice": "\x1b[1;35m",
    "Flying": "\x1b[0;36m",
    "Rock": "\x1b[33m",
    "Fire": "\x1b[1;41;37m",
    "Fairy": "\x1b[1;35m",
    "Psychic": "\x1b[1;35m",
    "Steel": "\x1b[1;37m",
    "Dark": "\x1b[1;30m",
    "Ground": "\x1b[31m",
    "Electric": "\x1b[1;33m",
    "Bug": "\x1b[32m",
    "Poison": "\x1b[35m",
    "Fighting": "\x1b[31m"
  }
  if ty in colors:
    return colors[ty] + ty + "\x1b[0m"
  else:
    return ty


pkmn = rows[0]
for k, v in pkmn.items():
  if k in ("Type 1", "Type 2"):
    pval = color_type(v)
  elif k == "Types":
    pval =  f"{color_type(v[0])}   {color_type(v[1])}"
  else:
    pval = v
  print(f"{k:12}: {pval}")

# ty_csv_path = script.parent / "pokemon_types.csv"
# tdata = list(DictReader(open(ty_csv_path)))

import operator
damage_by_attacker = {
  atk: operator.mul(
    *list(
      float(effectiveness.get(atk, {}).get(pkty, 1) or 1)
      if pkty else 1
      for pkty in pkmn["Types"]
    )
  )
  for atk in effectiveness.keys()
}

print()
print("=== Weak to: ===")
last_v = 100.0
for k, v in reversed(sorted(damage_by_attacker.items(), key=lambda i: i[1])):
  if v != 1.0:
    if v < 1.0 and last_v > 1.0:
      break
      print()
      print("=== Resistant to: ===")
    print(f"  {color_type(k)}: {v}")
    last_v = v